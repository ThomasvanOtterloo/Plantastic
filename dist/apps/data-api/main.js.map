{"version":3,"file":"main.js","mappings":"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","sources":["webpack://Plantastic/./apps/data-api/src/app/api-response.interceptor.ts","webpack://Plantastic/./apps/data-api/src/app/app.module.ts","webpack://Plantastic/./apps/data-api/src/app/auth/auth.controller.ts","webpack://Plantastic/./apps/data-api/src/app/auth/auth.module.ts","webpack://Plantastic/./apps/data-api/src/app/auth/auth.service.ts","webpack://Plantastic/./apps/data-api/src/app/auth/identity.schema.ts","webpack://Plantastic/./apps/data-api/src/app/auth/token.decorator.ts","webpack://Plantastic/./apps/data-api/src/app/auth/token.middleware.ts","webpack://Plantastic/./apps/data-api/src/app/data.module.ts","webpack://Plantastic/./apps/data-api/src/app/friend/follow.controller.ts","webpack://Plantastic/./apps/data-api/src/app/friend/follow.schema.ts","webpack://Plantastic/./apps/data-api/src/app/friend/follow.service.ts","webpack://Plantastic/./apps/data-api/src/app/neo4j/neo4j.constants.ts","webpack://Plantastic/./apps/data-api/src/app/neo4j/neo4j.module.ts","webpack://Plantastic/./apps/data-api/src/app/neo4j/neo4j.service.ts","webpack://Plantastic/./apps/data-api/src/app/neo4j/neo4j.util.ts","webpack://Plantastic/./apps/data-api/src/app/order/order.controller.ts","webpack://Plantastic/./apps/data-api/src/app/order/order.schema.ts","webpack://Plantastic/./apps/data-api/src/app/order/order.service.ts","webpack://Plantastic/./apps/data-api/src/app/product/product.controller.ts","webpack://Plantastic/./apps/data-api/src/app/product/product.schema.ts","webpack://Plantastic/./apps/data-api/src/app/product/product.service.ts","webpack://Plantastic/./apps/data-api/src/app/review/review.controller.ts","webpack://Plantastic/./apps/data-api/src/app/review/review.schema.ts","webpack://Plantastic/./apps/data-api/src/app/review/review.service.ts","webpack://Plantastic/./apps/data-api/src/app/rmcd.module.ts","webpack://Plantastic/./apps/data-api/src/app/user/user.controller.ts","webpack://Plantastic/./apps/data-api/src/app/user/user.schema.ts","webpack://Plantastic/./apps/data-api/src/app/user/user.service.ts","webpack://Plantastic/./libs/data/src/index.ts","webpack://Plantastic/external commonjs \"@nestjs/common\"","webpack://Plantastic/external commonjs \"@nestjs/core\"","webpack://Plantastic/external commonjs \"@nestjs/mongoose\"","webpack://Plantastic/external commonjs \"bcrypt\"","webpack://Plantastic/external commonjs \"jsonwebtoken\"","webpack://Plantastic/external commonjs \"mongoose\"","webpack://Plantastic/external commonjs \"neo4j-driver\"","webpack://Plantastic/external commonjs \"rxjs/operators\"","webpack://Plantastic/external commonjs \"tslib\"","webpack://Plantastic/external commonjs \"uuid\"","webpack://Plantastic/webpack/bootstrap","webpack://Plantastic/./apps/data-api/src/main.ts"],"sourcesContent":["import { ApiResponse } from '@find-a-buddy/data';\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ApiResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<ApiResponse<unknown>> {\n    return next\n      .handle()\n      .pipe(\n        map(results => {\n            if (results) {\n                return {\n                    results,\n                    info: {\n                        version: '1.0',\n                        type: results instanceof Array ? 'list' : 'object',\n                        count: results instanceof Array ? results.length : 1,\n                    }\n                }\n            } else {\n                return {\n                    results: undefined,\n                    info: {\n                        version: '1.0',\n                        type: 'none',\n                        count: 0,\n                    }\n                }\n            }\n        }\n      ));\n  }\n}\n","import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { RouterModule } from '@nestjs/core';\n\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AuthModule } from './auth/auth.module';\nimport { TokenMiddleware } from './auth/token.middleware';\nimport { DataModule } from './data.module';\nimport { Neo4jModule } from './neo4j/neo4j.module';\nimport { RcmdModule } from './rmcd.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(\n      // `mongodb+srv://${process.env.MONGO_USR}:${process.env.MONGO_PWD}@${process.env.MONGO_HOST}/${process.env.MONGO_DATABASE}?retryWrites=true&w=majority`\n      `mongodb://${process.env.MONGO_HOST}/${process.env.MONGO_DATABASE}`\n    ),\n    Neo4jModule.forRoot({\n      scheme: 'neo4j+s',\n      host: process.env.NEO4J_HOST,\n      username: process.env.NEO4J_USR,\n      password: process.env.NEO4J_PWD,\n      database: process.env.NEO4J_DATABASE,\n    }),\n    AuthModule,\n    DataModule,\n      RcmdModule,\n    RouterModule.register([\n      {\n        path: 'auth-api',\n        module: AuthModule,\n      },\n      {\n        path: 'data-api',\n        module: DataModule,\n      },\n      {\n        path: 'rcmd-api',\n        module: RcmdModule,\n      },\n    ]),\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(TokenMiddleware).forRoutes('data-api');\n    consumer.apply(TokenMiddleware).forRoutes('rcmd-api');\n  }\n}\n\n","import { Body, Controller, HttpException, HttpStatus, Post } from '@nestjs/common';\n\nimport {ResourceId, Token, UserInfo, UserRegistration} from '@find-a-buddy/data';\n\nimport { AuthService } from './auth.service';\n\n@Controller()\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {}\n\n    @Post('register')\n    async register(@Body() credentials: UserRegistration): Promise<ResourceId> {\n        console.log('register', credentials);\n        try {\n            await this.authService.registerUser(credentials.username, credentials.password);\n            console.log('register succeeded');\n            return {\n                id: await this.authService.createUser(credentials.username),\n            };\n        } catch (e) {\n            throw new HttpException('Username invalid' + e, HttpStatus.BAD_REQUEST);\n        }\n    }\n\n\n\n    @Post('login')\n    async login(@Body() credentials: UserRegistration): Promise<UserInfo> {\n        console.log('login inside controller', credentials);\n        try {\n            return  await this.authService.generateToken(credentials.username, credentials.password)\n        } catch (e) {\n            throw new HttpException('Invalid credentials:? ' + e, HttpStatus.UNAUTHORIZED);\n        }\n    }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AuthController } from './auth.controller';\n\nimport { Identity, IdentitySchema } from './identity.schema';\nimport { User, UserSchema } from '../user/user.schema';\nimport { AuthService } from './auth.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Identity.name, schema: IdentitySchema },\n      { name: User.name, schema: UserSchema }\n    ]),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {\n\n}","import { Injectable } from '@nestjs/common';\n\nimport { JwtPayload, verify, sign } from 'jsonwebtoken';\nimport { hash, compare } from 'bcrypt';\n\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\n\nimport { Identity, IdentityDocument } from './identity.schema';\nimport { User, UserDocument } from '../user/user.schema';\nimport {UserInfo} from \"@find-a-buddy/data\";\nimport {Neo4jService} from \"../neo4j/neo4j.service\";\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @InjectModel(Identity.name) private identityModel: Model<IdentityDocument>,\n        @InjectModel(User.name) private userModel: Model<UserDocument>,\n        private readonly neo4jService: Neo4jService\n    ) {}\n\n    async createUser(username: string): Promise<string> {\n        const user = new this.userModel({username});\n        await user.save();\n\n        const result = await this.neo4jService.singleWrite(\n            'CREATE (u:User {id: $id, username: $username}) RETURN u',\n            {id: user.id, username: user.username}\n        );\n\n        return user.id;\n      }\n\n    async verifyToken(token: string): Promise<string | JwtPayload> {\n        return new Promise((resolve, reject) => {\n            verify(token, process.env.JWT_SECRET, (err, payload) => {\n                if (err) reject(err);\n                else resolve(payload);\n            })\n        })\n    }\n\n    async registerUser(username: string, password: string) {\n        const generatedHash = await hash(password, parseInt(process.env.SALT_ROUNDS, 10));\n\n        const identity = new this.identityModel({username, hash: generatedHash});\n\n        console.log('registerUser', identity);\n\n        await identity.save();\n    }\n\n    async generateToken(username: string, password: string): Promise<UserInfo> {\n        const identity = await this.identityModel.findOne({username});\n        console.log(username, password, identity);\n\n        if (!identity || !(await compare(password, identity.hash))) throw new Error(\"user not authorized\");\n\n        const user = await this.userModel.findOne({username: username});\n\n        return new Promise((resolve, reject) => {\n            sign({username, id: user.id}, process.env.JWT_SECRET, (err: Error, token: string) => {\n                if (err) reject(err);\n                else resolve({token: token, id: user.id, username: username, password: ''});\n            });\n        })\n    }\n}\n/*\n* {\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRob21hcyIsImlkIjoiYzY1MDYwYzUtNTE4NC00MzJiLWE1NWEtMGUwNjkyNmE1NDg2IiwiaWF0IjoxNjY5NzMwMjcyfQ.4HgW4vSfKvwDhsRAyf-QwioHfheEH9Ar9tD_b6WSAyc\",\"id\":\"c65060c5-5184-432b-a55a-0e06926a5486\",\"username\":\"thomas\",\"password\":\"\",\"name\":\"\"}\n* */","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type IdentityDocument = Identity & Document;\n\n@Schema()\nexport class Identity {\n    @Prop({\n        required: true,\n        unique: true,\n    })\n    username: string;\n\n    @Prop({required: true})\n    hash: string;\n\n}\n\nexport const IdentitySchema = SchemaFactory.createForClass(Identity);\n","import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nimport { Id } from '@find-a-buddy/data';\n\nexport interface Token {\n  username: Id,\n  id: string,\n}\n\nexport const InjectToken = createParamDecorator(\n  (_data: unknown, ctx: ExecutionContext) => {\n    const response = ctx.switchToHttp().getResponse();\n    return response.locals.token;\n  },\n);","import { HttpException, HttpStatus, Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class TokenMiddleware implements NestMiddleware {\n  constructor(private authService: AuthService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const authHeader = req.header('authorization');\n\n    if (!authHeader) {\n      throw new HttpException('No authorization header', HttpStatus.UNAUTHORIZED);\n    }\n\n    try {\n      const token = await this.authService.verifyToken(authHeader);\n      \n      res.locals.token = token;\n    } catch (e) {\n      throw new HttpException('Token invalid', HttpStatus.UNAUTHORIZED);\n    }\n\n    next();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport {MongooseModule, Schema} from '@nestjs/mongoose';\n\n// import { TopicController } from './topic/topic.controller';\n// import { MeetupService } from './meetup/meetup.service';\n// import { TopicService } from './topic/topic.service';\nimport { ProductService} from \"./product/product.service\";\nimport { UserService } from './user/user.service';\n\nimport { User, UserSchema } from './user/user.schema';\n// import { Topic, TopicSchema } from './topic/topic.schema';\n// import { Meetup, MeetupSchema } from './meetup/meetup.schema';\nimport { Product, ProductSchema } from './product/product.schema';\nimport { UserController } from './user/user.controller';\nimport { ProductController } from './product/product.controller';\nimport {Review, ReviewSchema} from \"./review/review.schema\";\nimport {ReviewController} from \"./review/review.controller\";\nimport {ReviewService} from \"./review/review.service\";\nimport {OrderController} from \"./order/order.controller\";\nimport {OrderService} from \"./order/order.service\";\nimport {Order, OrderSchema} from \"./order/order.schema\";\nimport {Follow, FollowSchema} from \"./friend/follow.schema\";\nimport {FollowService} from \"./friend/follow.service\";\nimport {FollowController} from \"./friend/follow.controller\";\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: User.name, schema: UserSchema },\n      { name: Product.name, schema: ProductSchema },\n      { name: Review.name, schema: ReviewSchema },\n      { name: Order.name, schema:  OrderSchema },\n      { name: Follow.name, schema: FollowSchema}\n    ]),\n  ],\n  controllers: [\n    UserController,\n    ProductController,\n    ReviewController,\n    OrderController,\n    FollowController\n  ],\n  providers: [\n    UserService,\n    ProductService,\n    ReviewService,\n    OrderService,\n    FollowService\n  ],\n})\nexport class DataModule {}\n","import {Body, Controller, Delete, Get, HttpException, Param, Post} from '@nestjs/common';\nimport {InjectToken, Token} from '../auth/token.decorator';\nimport {FollowService} from \"./follow.service\";\nimport {Follow} from \"./follow.schema\";\nimport {User} from \"@find-a-buddy/data\";\n\n@Controller('follow')\nexport class FollowController {\n    constructor(private readonly followService: FollowService) {}\n    \n    @Get()\n    async CheckIfFollowed(@InjectToken() token: Token): Promise<Follow[]> {\n        try {\n            return this.followService.GetAllFollowers(token.id);\n        }\n        catch (e) {\n            console.log('DIDNT WORK', e);\n            throw new HttpException('Error deleting followed user >' + e, 500);\n        }\n    }\n\n    @Post()\n    async Follow(@InjectToken() token: Token, @Body() followingUser: Follow): Promise<Follow[]> {\n        try {\n            console.log('FOLLOWING USER', followingUser);\n            console.log('TOKEN ID', token);\n            return this.followService.Follow(token.id , followingUser.username);\n        }\n        catch (e) {\n            console.log('DIDNT WORK', e);\n            throw new HttpException('Error creating product >' + e, 500);\n        }\n    }\n\n\n\n    @Delete(':id')\n    async Unfollow(@InjectToken() token: Token, @Param('id') username: string): Promise<Follow[]> {\n        try {\n            return this.followService.Unfollow(token.id, username);\n        }\n        catch (e) {\n            console.log('DIDNT WORK', e);\n            throw new HttpException('Error deleting followed user >' + e, 500);\n        }\n    }\n\n    @Get('interests')\n    async getFollowersInterests(@InjectToken() token: Token): Promise<Follow[]> {\n        try {\n            return this.followService.getFollowersInterests(token.id);\n        }\n        catch (e) {\n            console.log('DIDNT WORK', e);\n            throw new HttpException('Error deleting followed user >' + e, 500);\n        }\n    }\n\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema } from 'mongoose';\nimport { v4 as uuid } from 'uuid';\n\nexport type FollowDocument = Follow & Document;\n\n@Schema()\nexport class Follow {\n\n  @Prop({default: uuid, index: true})\n  id: string;\n\n  @Prop({\n    required: true,\n    unique: true,\n  })\n  userId: string;\n\n  @Prop({\n    required: true,\n    unique: true,\n  })\n  username: string;\n\n\n\n}\n\nexport const FollowSchema = SchemaFactory.createForClass(Follow);\n","import {Injectable} from '@nestjs/common';\n\nimport {Model} from 'mongoose';\nimport {InjectModel} from '@nestjs/mongoose';\n\nimport {User, UserDocument} from \"../user/user.schema\";\nimport {Follow, FollowDocument} from \"./follow.schema\";\nimport {Neo4jService} from \"../neo4j/neo4j.service\";\n\n\n@Injectable()\nexport class FollowService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model<UserDocument>,\n    @InjectModel(Follow.name) private followModel: Model<FollowDocument>,\n    private readonly neo4jService: Neo4jService\n  ) {}\n\n    async Follow(tokenId: string, username: string): Promise<Follow[]> {\n\n\n      const findFollowingUser = await this.userModel.aggregate(\n        [\n            {\n                $match: {\n                    username: username,\n                }\n            },\n            {\n                $group: {\n                    _id: '$_id',\n                    id: {$first: '$id'},\n                    username: {$first: '$username'},\n                    // products: {$first: '$products'},\n                }\n            }\n        ]);\n\n      await Promise.all([\n            await this.userModel.updateOne(\n                {id: tokenId},\n                {$push: {following: findFollowingUser}},\n            )]);\n\n      const findFollowingId = await this.userModel.findOne({\n        username: username\n      });\n\n      const followUser = await this.neo4jService.singleWrite(\n        'MATCH (u:User {id: $id}), (f:User {id: $followingId}) MERGE (u)-[r:FOLLOWS]->(f) RETURN u, r, f',\n        {id: tokenId, followingId: findFollowingId.id}\n        );\n\n      console.log('follwing user neo: ',followUser);\n\n        return this.userModel.aggregate([\n            {\n                $match: {\n                    id: tokenId,\n                }\n            },\n            {\n                $group: {\n                    _id: '$_id',\n                    id: {$first: '$id'},\n                    username: {$first: '$username'},\n                    following: {$first: '$following'},\n                }\n            }]);\n      }\n\n\n    async Unfollow(userId: string, followingUsername: string): Promise<Follow[]> {\n        const findFollowingUser = await this.userModel.aggregate(\n            [\n                {\n                    $match: {\n                        username: followingUsername,\n                    }\n                },\n                {\n                    $group: {\n                        _id: '$_id',\n                        id: {$first: '$id'},\n                        username: {$first: '$username'},\n                        // products: {$first: '$products'},\n                    }\n                }\n            ]);\n        const getFollowingUser = await this.userModel.findOne({username: followingUsername});\n\n        await Promise.all([\n            await this.userModel.updateOne(\n                {id: userId},\n                {$pull: {following: findFollowingUser}},\n            )]);\n\n        const unfollowUser = await this.neo4jService.singleWrite(\n            'MATCH (u:User {id: $id})-[r:FOLLOWS]->(f:User {id: $followingId}) DELETE r',\n            {id: userId, followingId: getFollowingUser.id}\n        );\n\n        console.log('unfollow user neo: ',unfollowUser);\n\n        return await this.userModel.aggregate([\n            {\n                $match: {\n                    id: userId,\n                }\n            },\n            {\n                $group: {\n                    _id: '$_id',\n                    id: {$first: '$id'},\n                    username: {$first: '$username'},\n                    following: {$first: '$following'},\n                }\n            }\n            ]);\n    }\n\n    async GetAllFollowers(userId: string): Promise<Follow[]> {\n\n        return this.userModel.aggregate([\n            {\n                $match: {\n                    id: userId,\n                }\n            },\n            {\n                $group: {\n                    _id: '$_id',\n                    id: {$first: '$id'},\n                    username: {$first: '$username'},\n                    following: {$first: '$following'},\n                }\n            }]);\n    }\n\n    async getFollowersInterests(userId: string): Promise<Follow[]> {\n\n\n      const getListOfFollowersInterests = await this.neo4jService.singleRead(\n        'MATCH (u:User {id: $id})-[r:FOLLOWS]->(f:User)-[:SOLD_BY|:ORDERED]->(p:Product) RETURN DISTINCT p',\n        {id: userId}\n        );\n\n\n\n        const getResultOfInterests = getListOfFollowersInterests.records.map((record) => {\n            return record.get('p').properties;\n        });\n\n\n      console.log('getListOfFollowersOrders: ', getResultOfInterests);\n\n\n\n    return getResultOfInterests;\n    }\n\n\n\n\n}\n","export const NEO4J_CONFIG = 'NEO4J_CONFIG'\nexport const NEO4J_DRIVER = 'NEO4J_DRIVER'\n","// based on: https://github.com/adam-cowley/twitch-project\n// also see: https://medium.com/neo4j/building-a-modern-web-application-with-neo4j-and-nestjs-b51ffd8268fa\n\nimport { Module, DynamicModule } from '@nestjs/common';\nimport { Neo4jService } from './neo4j.service';\nimport { Neo4jConfig } from './neo4j-config.interface';\nimport { NEO4J_CONFIG, NEO4J_DRIVER } from './neo4j.constants';\nimport { createDriver } from './neo4j.util';\n\n@Module({})\nexport class Neo4jModule {\n  static forRoot(config: Neo4jConfig): DynamicModule {\n    return {\n      module: Neo4jModule,\n      global: true,\n      providers: [\n        {\n          provide: NEO4J_CONFIG,\n          useValue: config,\n        },\n        {\n          provide: NEO4J_DRIVER,\n          inject: [ NEO4J_CONFIG ],\n          useFactory: async (config: Neo4jConfig) => createDriver(config),\n        },\n        Neo4jService,\n      ],\n      exports: [\n        Neo4jService,\n      ]\n    }\n  }\n\n  static forMock() {\n    \n  }\n}\n","import neo4j, { Result, Driver, SessionMode, ManagedTransaction } from 'neo4j-driver'\nimport { Injectable, Inject, OnApplicationShutdown } from '@nestjs/common';\nimport { Neo4jConfig } from './neo4j-config.interface';\nimport { NEO4J_CONFIG, NEO4J_DRIVER } from './neo4j.constants';\nimport { Neo4jQuery, ReadWriteMode } from './neo4j.query';\n\nexport type TransactionWork = (tx: ManagedTransaction) => Promise<Result>;\n\nfunction getMode(mode: ReadWriteMode): SessionMode {\n  return mode == 'read' ? neo4j.session.READ : neo4j.session.WRITE;\n}\n\n@Injectable()\nexport class Neo4jService implements OnApplicationShutdown {\n  constructor(\n    @Inject(NEO4J_CONFIG) private readonly config: Neo4jConfig,\n    @Inject(NEO4J_DRIVER) private readonly driver: Driver\n  ) {}\n\n  private getSession(mode: SessionMode) {\n      return this.driver.session({\n        database: this.config.database,\n        defaultAccessMode: mode,\n      });\n  }\n\n  private async executeSingle(mode: SessionMode, query: string, params?: unknown): Promise<Result> {\n    const session = this.getSession(mode);\n    const result = await session.run(query, params);\n    session.close();\n    return result;\n  }\n\n  private async executeTransaction(mode: SessionMode, transactionWork: TransactionWork): Promise<Result> {\n    const session = this.getSession(neo4j.session.READ);\n\n    let result;\n    if (mode === neo4j.session.READ) {\n      result = await session.executeRead(transactionWork);\n    } else {\n      result = await session.executeWrite(transactionWork);\n    }\n\n    session.close();\n    return result;\n  }\n\n  getConfig(): Neo4jConfig {\n      return this.config;\n  }\n\n  // use these two for access to neo4j result object when running one query\n  async singleRead(query: string, params?: unknown): Promise<Result> {\n    return this.executeSingle(neo4j.session.READ, query, params);\n  }\n\n  async singleWrite(query: string, params?: unknown): Promise<Result> {\n    return this.executeSingle(neo4j.session.WRITE, query, params);\n  }\n\n  // use these two for access to neo4j result object when running transactions\n  async readTransaction(transactionWork: TransactionWork): Promise<Result> {\n    return this.executeTransaction(neo4j.session.READ, transactionWork);\n  }\n\n  async writeTransaction(transactionWork: TransactionWork): Promise<Result> {\n    return this.executeTransaction(neo4j.session.READ, transactionWork);\n  }\n\n  // here the neo4j driver is abstracted away from the outside\n  // TODO handle 64 bit integers\n  // TODO clean returned object to match our own Node and Relation type?\n  // TODO how to handle variadic types?\n  async run<R>(query: Neo4jQuery<R>, params?: unknown): Promise<R[]> {\n    const result = await this.executeSingle(getMode(query.mode), query.text, params);\n    return result.records.map(r => r.toObject());\n  }\n\n  // transaction with neo4j driver abstracted away\n  // TODO\n\n  onApplicationShutdown() {\n    return this.driver.close()\n  }\n}\n","import neo4j, { Driver } from 'neo4j-driver'\nimport { Neo4jConfig } from './neo4j-config.interface'\n\nexport const createDriver = async (config: Neo4jConfig) => {\n    const driver: Driver = neo4j.driver(\n        `bolt://127.0.0.1:7687`,\n        neo4j.auth.basic(config.username, config.password)\n    );\n\n    console.log(config.host)\n\n    await driver.getServerInfo();\n\n    return driver;\n}\n","\nimport {Body, Controller, Get, HttpException, HttpStatus, Param,Delete , Post} from '@nestjs/common';\n\n\nimport {Product, Review, User} from '@find-a-buddy/data';\nimport { InjectToken, Token } from '../auth/token.decorator';\nimport {OrderService} from \"./order.service\";\nimport {Order} from \"./order.schema\";\n\n@Controller('order')\nexport class OrderController {\n    constructor(private readonly orderService: OrderService) {}\n\n    @Get('self')\n    async getAll(@InjectToken() token: Token,): Promise<Order[]> {\n        return await this.orderService.getAll(token.id);\n    }\n\n\n    @Post()\n    async create(@InjectToken() token: Token,  @Body() order: Order): Promise<Order> {\n        try {\n            return await this.orderService.create(order , token );\n        }\n        catch (e) {\n            console.log('error', e);\n            throw new HttpException('Error creating product >' + e, HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @Delete(':id')\n    async delete(@InjectToken() token: Token,  @Param('id') orderId: string): Promise<Order> {\n        try {\n            return await this.orderService.delete(orderId, token);\n        }\n        catch (e) {\n            console.log('error', e);\n            throw new HttpException('Error creating product >' + e, HttpStatus.BAD_REQUEST);\n        }\n    }\n\n\n\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema } from 'mongoose';\nimport { v4 as uuid } from 'uuid';\n\nexport type OrderDocument = Order & Document;\n\n@Schema()\nexport class Order {\n\n  @Prop({default: uuid, index: true})\n  id: string;\n\n  @Prop({\n    required: true,\n    unique: false,\n  })\n  productId: string;\n\n  @Prop({\n    required: true,\n    unique: false,\n  })\n  authorId: string;\n\n  @Prop({\n    required: true,\n    unique: false,\n  })\n  quantity: number;\n\n  @Prop({\n    required: false,\n    unique: false,\n  })\n  total: number;\n\n  @Prop({\n    required: true,\n  })\n  deliveryDate: Date;\n\n  @Prop({\n    required: false,\n    unique: false,\n  })\n  productImage: string;\n\n  @Prop({\n    required: false,\n    unique: false,\n  })\n  productName: string;\n\n\n\n\n\n\n\n\n}\n\nexport const OrderSchema = SchemaFactory.createForClass(Order);\n","import {Injectable} from '@nestjs/common';\n\nimport {Model} from 'mongoose';\nimport {InjectModel} from '@nestjs/mongoose';\n\nimport {User, UserDocument} from \"../user/user.schema\";\nimport {Product, ProductDocument} from \"../product/product.schema\";\nimport {Order, OrderDocument} from \"./order.schema\";\nimport {Token} from \"../auth/token.decorator\";\nimport {Neo4jService} from \"../neo4j/neo4j.service\";\n\n\n@Injectable()\nexport class OrderService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model<UserDocument>,\n    @InjectModel(Product.name) private productModel: Model<ProductDocument>,\n    @InjectModel(Order.name) private orderModel: Model<OrderDocument>,\n    private readonly neo4jService: Neo4jService\n  ) {}\n\n  async getAll(token : string): Promise<Order[]> {\n    return this.orderModel.aggregate([{\n        $match: {\n            authorId: token,\n      }},\n        {\n            $group: {\n                _id: '$_id',\n                id: {$first: '$id'},\n                productId: {$first: '$productId'},\n                authorId: {$first: '$authorId'},\n                quantity: {$first: '$quantity'},\n                total: {$first: '$total'},\n                deliveryDate: {$first: '$deliveryDate'},\n                productImage: {$first: '$productImage'},\n                productName: {$first: '$productName'},\n            }\n        },\n        {\n            $lookup: {\n                from: 'products',\n                localField: 'productId',\n                foreignField: 'id',\n                as: 'product',\n            }\n        }\n    ]);\n  }\n\n  async getOne(orderId: string): Promise<Order | null> {\n    const products = await this.orderModel.aggregate([{\n        $match: {\n            orderId: orderId,\n        }},\n        {\n            $group: {\n                _id: '$_id',\n                id: {$first: '$id'},\n                productId: {$first: '$productId'},\n                authorId: {$first: '$authorId'},\n                quantity: {$first: '$quantity'},\n                total: {$first: '$total'},\n                deliveryDate: {$first: '$deliveryDate'},\n            }\n        }\n    ]);\n    return products[0];\n  }\n\n  async create(order: Order, token: Token): Promise<Order> {\n    const product = await this.productModel.findOne({ id: order.productId });\n    const author = await this.userModel.findOne({ id: token.id});\n\n    if (product && author) {\n        const newOrder = new this.orderModel({\n            authorId: token.id,\n            productId: order.productId,\n            quantity: order.quantity,\n            total: order.quantity * product.price,\n            productPrice: product.price,\n            deliveryDate: new Date().setDate( new Date().getDate() + 7 ),\n            productImage: product.image,\n            productName: product.name,\n        });\n        author.orders.push(newOrder);\n\n        const updateUser = await this.userModel.findOneAndUpdate(\n            { id: token.id },\n            { $set: {\n                orders: author.orders,\n                    wallet: author.wallet - newOrder.total,\n            } },\n        );\n\n        const updateProduct = await this.productModel.findOneAndUpdate(\n            { id: order.productId },\n            { $set: {\n                quantity: product.quantity - order.quantity,\n            } },\n        );\n        const userOrdersProduct = await this.neo4jService.singleWrite(\n            `MATCH (u:User {id: $authorId})\n            MATCH (p:Product {id: $productId})\n            CREATE (u)-[:ORDERED]->(p)\n            RETURN u, p`,\n            {\n                authorId: token.id,\n                productId: order.productId,\n            },\n        );\n\n        await Promise.all([updateUser, updateProduct]);\n        return newOrder.save();\n    }\n  }\n\n    async delete(orderId: string, token: Token): Promise<Order> {\n        const order = await this.orderModel.findOne\n        ({ id: orderId });\n\n        if (order.authorId === token.id) {\n            const product = await this.productModel.findOne({ id: order.productId });\n            const author = await this.userModel.findOne({ id: token.id});\n\n            if (product && author) {\n                const updateUser = await this.userModel.findOneAndUpdate(\n                    { id: token.id },\n                    { $set: {\n                        wallet: author.wallet + order.total,\n                    } },\n                );\n\n                const updateProduct = await this.productModel.findOneAndUpdate(\n                    { id: order.productId },\n                    { $set: {\n                        quantity: product.quantity + order.quantity,\n                    } },\n                );\n\n                await Promise.all([updateUser, updateProduct]);\n                return this.orderModel.findOneAndDelete({ id: orderId\n\n                });\n            }\n        } else {\n            throw new Error('You can not delete this order');\n        }\n    }\n}\n","\nimport {Body, Controller, Delete, Get, HttpException,HttpStatus ,Param, Patch, Post, Put} from '@nestjs/common';\n\n\nimport { Product, User } from '@find-a-buddy/data';\nimport { InjectToken, Token } from '../auth/token.decorator';\nimport {ProductService} from \"./product.service\";\nimport {HttpResponse} from \"@angular/common/http\";\n\n@Controller('product')\nexport class ProductController {\n    constructor(private readonly productService: ProductService) {}\n\n    @Get()\n    async getAll(): Promise<Product[]> {\n        return this.productService.getAll();\n    }\n\n\n\n    @Get(':id')\n    async getOne(@Param('id') id: string): Promise<Product> {\n        return this.productService.getOne(id);\n    }\n\n\n    @Post()\n    async create(@InjectToken() token: Token,  @Body() product: Product): Promise<Product> {\n        if (product.image === '') {\n            product.image = 'https://static.vecteezy.com/system/resources/previews/002/425/076/non_2x/plant-leaves-in-a-pot-beautiful-green-houseplant-isolated-simple-trendy-flat-style-for-interior-garden-decoration-design-free-vector.jpg'\n        }\n        try {\n            return await this.productService.create(product, token);\n        }\n        catch (e) {\n            console.log('error', e);\n            throw new HttpException('Error creating product >' + e, 500);\n        }\n    }\n\n    @Delete(':id')\n    async delete(@InjectToken() token: Token, @Param('id') id: string): Promise<Product> {\n        await this.productService.delete(id, token);\n        return null;\n    }\n\n    @Patch(':id')\n    async update(@InjectToken() token: Token, @Param('id') id: string, @Body() product: Product): Promise<Product> {\n        try {\n            return await this.productService.update(id, product, token);\n        }\n        catch (e) {\n            console.log('error', e);\n            throw new HttpException('Error updating product >' + e, HttpStatus.BAD_REQUEST);\n        }\n    }\n\n\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema } from 'mongoose';\nimport { v4 as uuid } from 'uuid';\nimport isEmail from 'validator/lib/isEmail';\nimport {Category, Review, User} from \"@find-a-buddy/data\";\n// import { Meetup } from '../meetup/meetup.schema';\n\nexport type ProductDocument = Product & Document;\n\n@Schema()\nexport class Product {\n  @Prop({default: uuid, index: true})\n  id: string;\n\n  @Prop({\n    required: true,\n    unique: false,\n  })\n  name: string;\n\n  @Prop({\n    required: true,\n  })\n  description: string;\n\n  @Prop({\n    required: true,\n  })\n  price: number;\n\n  @Prop({\n    required: true,\n  })\n  quantity: number;\n\n  @Prop({\n    required: true,\n  })\n  author: string;\n\n  @Prop({\n    required: true,\n  })\n  authorId: string;\n\n  @Prop({\n    required: false,\n    default: 'https://static.vecteezy.com/system/resources/previews/002/425/076/non_2x/plant-leaves-in-a-pot-beautiful-green-houseplant-isolated-simple-trendy-flat-style-for-interior-garden-decoration-design-free-vector.jpg'\n  })\n  image: string;\n\n  @Prop({default: []})\n  reviews: Review[];\n\n  @Prop({\n    default: [],\n    required: true,\n  })\n  category: Category[];\n\n\n}\n\nexport const ProductSchema = SchemaFactory.createForClass(Product);\n","import {Injectable} from '@nestjs/common';\n\nimport {Model} from 'mongoose';\nimport {InjectModel} from '@nestjs/mongoose';\n\nimport {Product as ProductModel, ProductDocument} from './product.schema';\nimport {Category, Id, Product, Review} from '@find-a-buddy/data';\nimport {User, UserDocument} from \"../user/user.schema\";\nimport {Token} from \"../auth/token.decorator\";\nimport {Neo4jService} from \"../neo4j/neo4j.service\";\n\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    @InjectModel(ProductModel.name) private productModel: Model<ProductDocument>,\n    @InjectModel(User.name) private userModel: Model<UserDocument>,\n    private readonly neo4jService: Neo4jService\n  ) {}\n\n  async getAll(): Promise<Product[]> {\n    return this.productModel.aggregate([\n        {\n            $lookup: {\n                from: 'products',\n                localField: 'products',\n                foreignField: 'id',\n                as: 'products',\n            }\n\n        },\n        {\n            $group: {\n                _id: '$_id',\n                id: {$first: '$id'},\n                author: {$first: '$author'},\n                name: {$first: '$name'},\n                description: {$first: '$description'},\n                image: {$first: '$image'},\n                quantity: {$first: '$quantity'},\n                price: {$first: '$price'},\n                reviews: {$first: '$reviews'},\n                category: {$first: '$category'},\n            },\n        },\n        {\n            $addFields: {\n                rating: {\n                    rating: {$avg: '$reviews.rating'},\n                }\n            }\n        }\n    ]);\n  }\n\n  async delete(productId: string, token: Token){\n      console.log('productId', productId);\n      const product = await this.productModel.findOne({ id: productId });\n        if (!product) {\n            throw new Error('Product not found');\n        }\n\n      if (product.authorId !== token.id) {\n            throw new Error('You are not allowed to delete this product');\n      }\n    await this.productModel.deleteOne({ id: productId });\n\n      const deleteProductNeo4j = await this.neo4jService.singleWrite(\n            `MATCH (p:Product {id: $id}) DETACH DELETE p`,\n            {\n                id: productId,\n            }\n        );\n\n    await this.userModel.updateMany(\n        {},\n        {\n            $pull: {\n                products: {\n                    id: productId,\n                },\n            },\n        },\n        { multi: true }\n    );\n  }\n\n\n\n  async getOne(productId: string): Promise<Product | null> {\n    const products = await this.productModel.aggregate([\n        {\n            $match: {\n                id: productId,\n            }\n        },\n        {\n            $group: {\n                _id: '$_id',\n                id: {$first: '$id'},\n                author: {$first: '$author'},\n                authorId: {$first: '$authorId'},\n                name: {$first: '$name'},\n                description: {$first: '$description'},\n                image: {$first: '$image'},\n                quantity: {$first: '$quantity'},\n                price: {$first: '$price'},\n                reviews: {$first: '$reviews'},\n                category: {$first: '$category'},\n            }\n        },\n        {\n            $addFields: {\n                rating: {\n                    rating: {$avg: '$reviews.rating'},\n                }\n            }\n        }\n    ]);\n    return products[0];\n  }\n\n  async create(product: Product, token: Token): Promise<Product> {\n      console.log(product)\n    const author = await this.userModel.findOne({ username: token.username });\n    if (!author) {\n        throw new Error('AuthorId not found');\n    }\n\n      if (product.price <1) {\n          throw new Error('Price must be greater than 1');\n      }\n      if (product.quantity <2) {\n          throw new Error('Quantity must be greater than 2');\n      }\n      if (product.category.length <1) {\n          throw new Error('Category must be greater than 1');\n      }\n      if (product.name.length <1) {\n          throw new Error('Name must be greater than 1');\n      }\n      if (product.description.length <1) {\n          throw new Error('Description must be greater than 1');\n      }\n\n    const newProduct = new this.productModel({\n        author: author.username,\n        authorId: author.id,\n        name: product.name,\n        description: product.description,\n        image: product.image,\n        quantity: product.quantity,\n        price: product.price,\n        category: product.category,\n    });\n\n    const addProductToUser = await this.userModel.findOneAndUpdate(\n        { username: token.username },\n        {\n            $push: {\n                products: {\n                    id: newProduct.id,\n                    name: newProduct.name,\n                    description: newProduct.description,\n                    image: newProduct.image,\n                    quantity: newProduct.quantity,\n                    price: newProduct.price,\n                    category: newProduct.category,\n                },\n            },\n        },\n        { new: true }\n    );\n\n      const AddProductWithUser = await this.neo4jService.singleWrite(\n           'MATCH (u:User {id: $userId}) CREATE (p:Product {id: $productId, name: $productName, description: $productDescription, image: $productImage, quantity: $productQuantity, price: $productPrice, category: $productCategory}) CREATE (u)-[:SOLD_BY]->(p)',\n            {\n                userId: author.id,\n                productId: newProduct.id,\n                productName: newProduct.name,\n                productDescription: newProduct.description,\n                productImage: newProduct.image,\n                productQuantity: newProduct.quantity,\n                productPrice: newProduct.price,\n                productCategory: newProduct.category,\n            }\n        );\n\n      console.log('createProductNeo4j', AddProductWithUser);\n\n    await Promise.all([newProduct.save(), addProductToUser.save()]);\n\n    return newProduct;\n  }\n\n    async update(productId: string , product: Product, token: Token): Promise<Product> {\n        if (product.authorId !== token.id) {\n            throw new Error('You are not allowed to update this product');\n        }\n        if (product.price <1) {\n            throw new Error('Price must be greater than 1');\n        }\n        if (product.quantity <2) {\n            throw new Error('Quantity must be greater than 2');\n        }\n        if (product.category.length <1) {\n            throw new Error('Category must be greater than 1');\n        }\n        if (product.name.length <1) {\n            throw new Error('Name must be greater than 1 character');\n        }\n\n        const updatedProduct = await this.productModel.findOneAndUpdate(\n            { id: productId },\n            {\n                ...product,\n            },\n            { new: true }\n        );\n\n        const updateProductNeo4j = await this.neo4jService.singleWrite(\n            `MATCH (p:Product {id: $id}) SET p.name = $name, p.description = $description, p.image = $image, p.quantity = $quantity, p.price = $price, p.category = $category`,\n            {\n                id: productId,\n                name: product.name,\n                description: product.description,\n                image: product.image,\n                quantity: product.quantity,\n                price: product.price,\n                category: product.category,\n            }\n        );\n\n        const updatedAuthor = await this.userModel.findOneAndUpdate(\n            { username: updatedProduct.author },\n            {\n                $set: {\n                    'products.$[elem].name': updatedProduct.name,\n                    'products.$[elem].description': updatedProduct.description,\n                    'products.$[elem].image': updatedProduct.image,\n                    'products.$[elem].quantity': updatedProduct.quantity,\n                    'products.$[elem].price': updatedProduct.price,\n                    'products.$[elem].category': updatedProduct.category,\n                }\n            },\n            {\n                arrayFilters: [\n                    { 'elem.id': productId }\n                ],\n                new: true\n            });\n    return updatedProduct;\n    }\n}\n","\nimport {Body, Controller, Delete, Get, HttpException, Param, Patch, Post, Put} from '@nestjs/common';\n\n\nimport {Product, Review, User} from '@find-a-buddy/data';\nimport { InjectToken, Token } from '../auth/token.decorator';\nimport {ReviewService} from \"./review.service\";\n\n@Controller('review')\nexport class ReviewController {\n    constructor(private readonly reviewService: ReviewService) {}\n\n    @Get()\n    async getAll(): Promise<Review[]> {\n        return this.reviewService.getAll();\n    }\n\n\n\n    @Get(':id')\n    async getOne(@Param('id') id: string): Promise<Review> {\n        return this.reviewService.getOne(id);\n    }\n\n\n    @Post(':id')\n    async create(@InjectToken() token: Token, @Param('id') productId: string ,  @Body() review: Review): Promise<any> {\n        try {\n            return await this.reviewService.create(review , token, productId);\n        }\n        catch (e) {\n            console.log('error', e);\n            throw new HttpException('Error creating product >' + e, 500);\n        }\n    }\n\n    @Delete(':id')\n    async delete(@InjectToken() token: Token, @Param('id') id: string): Promise<void> {\n        return this.reviewService.delete(token , id);\n    }\n\n    @Patch(':id')\n    async update(@Param('id') id: string, @Body() review: Review): Promise<Review> {\n        console.log('adasdasd',review);\n        return this.reviewService.update(id, review);\n    }\n\n\n\n}","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema } from 'mongoose';\nimport { v4 as uuid } from 'uuid';\n\nexport type ReviewDocument = Review & Document;\n\n@Schema()\nexport class Review {\n\n  @Prop({default: uuid, index: true})\n  id: string;\n\n  @Prop({\n    required: true,\n    unique: false,\n  })\n  productId: string;\n\n  @Prop({\n    required: true,\n    unique: false,\n  })\n  authorId: string;\n\n  @Prop({\n    required: true,\n    default: Date.now\n  })\n  datetime: Date;\n\n  @Prop({\n    required: true,\n    unique: false,\n  })\n  author: string;\n\n  @Prop({\n    required: true,\n    unique: false,\n  })\n  description: string;\n\n  @Prop({\n    required: true,\n    unique: false,\n    default: 0,\n    validate: [rating => rating >= 0 && rating <= 10, 'Rating must be between 0 and 10'],\n  })\n  rating: number;\n\n\n\n}\n\nexport const ReviewSchema = SchemaFactory.createForClass(Review);\n","import {Injectable, NotFoundException} from '@nestjs/common';\n\nimport {Model} from 'mongoose';\nimport {InjectModel} from '@nestjs/mongoose';\n\nimport { ReviewDocument, Review as ReviewModel} from './review.schema';\nimport {Category, Id, Review} from '@find-a-buddy/data';\nimport {User, UserDocument} from \"../user/user.schema\";\nimport {Product, ProductDocument} from \"../product/product.schema\";\nimport {Token} from \"../auth/token.decorator\";\n\n\n@Injectable()\nexport class ReviewService {\n  constructor(\n    @InjectModel(ReviewModel.name) private reviewModel: Model<ReviewDocument>,\n    @InjectModel(User.name) private userModel: Model<UserDocument>,\n    @InjectModel(Product.name) private productModel: Model<ProductDocument>\n  ) {}\n\n  async getAll(): Promise<Review[]> {\n    return this.reviewModel.aggregate([\n        {\n            $lookup: {\n                from: 'reviews',\n                localField: 'reviews',\n                foreignField: 'id',\n                as: 'reviews',\n            }\n        },\n        {\n            $group: {\n                _id: '$_id',\n                id: {$first: '$id'},\n                productId: {$first: '$productId'},\n                author: {$first: '$author'},\n                description: {$first: '$description'},\n                rating: {$first: '$rating'},\n            }\n        }\n    ]);\n  }\n\n  async delete(token: Token , id: string){\n\n      const findUserWithReview = await this.userModel.findOne\n        ({id: token.id, reviews: {$elemMatch: {id: id}}});\n        if (!findUserWithReview) {\n            throw new Error(`Review with id ${id} not found`);\n        }\n\n\n      await Promise.all([\n          this.userModel.updateMany({username: token.username}, { $pull: { reviews: { id: id } } }),\n          this.productModel.updateMany({}, { $pull: { reviews: { id: id } } }),\n          this.reviewModel.deleteOne({id: id }),\n      ]);\n\n  }\n\n\n\n\n\n  async getOne(productId: string): Promise<Review | null> {\n    const products = await this.reviewModel.aggregate([\n        {\n            $match: {\n                id: productId,\n            }\n        },\n        {\n            $group: {\n                _id: '$_id',\n                id: {$first: '$id'},\n                productId: {$first: '$productId'},\n                author: {$first: '$author'},\n                description: {$first: '$description'},\n                rating: {$first: '$rating'},\n            }\n        }\n    ]);\n    return products[0];\n  }\n\n  async create(review: Review, author: Token, productId: string): Promise<User> {\n    console.log(review);\n      review.authorId = author.id;\n      review.author = author.username;\n      review.productId = productId;\n\n      if (review.rating > 10 || review.rating < 0 || review.rating % 1 !== 0) {\n            throw new NotFoundException(`Rating must be between 0 and 10`);\n      }\n      if (review.description === '') {\n            throw new NotFoundException(`Description must not be empty`);\n      }\n\n        const newReview = new this.reviewModel({\n            ...review,\n        });\n    const createdReview = await this.userModel.findOneAndUpdate({ id: author.id }, { $push: { reviews: newReview } });\n    const createdReview2 = await this.productModel.findOneAndUpdate({ id: productId }, { $push: { reviews: newReview } });\n\n    await Promise.all([createdReview, createdReview2, newReview]);\n\n    return createdReview\n  }\n\n    async update(id: string, review: Review): Promise<Review> {\n\n      const updatedReview = await this.reviewModel.findOneAndUpdate({\n            id: id,\n        }, {\n            ...review,\n        }, {\n            new: true,\n        });\n\n      const updatedReview2 = await this.userModel.findOneAndUpdate({\n            id: review.authorId,\n        }, {\n            $set: {\n                'reviews.$[elem].description': review.description,\n                'reviews.$[elem].rating': review.rating,\n            }\n        }, {\n            arrayFilters: [{\n                'elem.id': id,\n            }],\n            new: true,\n        });\n\n         const updatedReview3 = await this.productModel.findOneAndUpdate({\n            id: review.productId,\n        }, {\n            $set: {\n                'reviews.$[elem].description': review.description,\n                'reviews.$[elem].rating': review.rating,\n            }\n        }, {\n            arrayFilters: [{\n                'elem.id': id,\n            }],\n            new: true,\n        });\n\n        await Promise.all([updatedReview, updatedReview2, updatedReview3]);\n\n        return updatedReview;\n    }\n\n    formatReviewDate(date: Date) {\n        return date.toLocaleString('en-us',{month:'short', year:'numeric', day:'numeric'})\n    }\n}\n","import { Module } from '@nestjs/common';\n\n@Module({\n    imports: [],\n    controllers: [],\n    providers: [],\n})\nexport class RcmdModule {}\n","import {Body, Controller, Delete, Get, Param, Post} from '@nestjs/common';\n\nimport {UserService} from './user.service';\n\nimport {User, UserInfo} from '@find-a-buddy/data';\nimport {InjectToken, Token} from '../auth/token.decorator';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get()\n  async getAll(): Promise<UserInfo[]> {\n    return this.userService.getAll();\n  }\n\n  // this method should precede the general getOne method, otherwise it never matches\n  @Get('self')\n  async getSelf(@InjectToken() token: Token): Promise<User> {\n    console.log('token CurrentLogger:', token);\n    return await this.userService.getOne(token.id);\n  }\n\n  @Get(':id')\n  async getOne(@Param('id') id: string): Promise<User> {\n    return this.userService.getOne(id);\n  }\n\n\n\n\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema } from 'mongoose';\nimport { v4 as uuid } from 'uuid';\nimport {Product, Review} from \"@find-a-buddy/data\";\nimport {Order} from \"../order/order.schema\";\n\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n  @Prop({default: uuid, index: true})\n  id: string;\n\n  @Prop({\n    required: true,\n    unique: true,\n  })\n  username: string;\n\n  @Prop({\n    default: 500,\n    unique: false,\n  })\n  wallet: number;\n\n  @Prop({default: []})\n  following: User[];\n\n  @Prop({default: []})\n  products: Product[];\n\n  @Prop({default: []})\n  reviews: Review[];\n\n  @Prop({default: []})\n  orders: Order[];\n\n\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n","import { Injectable } from '@nestjs/common';\n\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\n\nimport { User as UserModel, UserDocument } from './user.schema';\n\nimport { User, UserInfo } from '@find-a-buddy/data';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectModel(UserModel.name) private userModel: Model<UserDocument>,\n    // @InjectModel(Meetup.name) private meetupModel: Model<MeetupDocument>\n  ) {}\n\n  async getAll(): Promise<UserInfo[]> {\n    return this.userModel.aggregate([{\n      $lookup: {\n        from: 'meetups',\n        localField: 'meetups',\n        foreignField: '_id',\n        as: 'meetups',\n      }},\n        {$group: {\n            _id: '$_id',\n            id: {$first: '$id'},\n            username: {$first: '$username'},\n            wallet: {$first: '$wallet'},\n            products: {$first: '$products'},\n            reviews: {$first: '$reviews'},\n            following: {$first: '$following'},\n            orders: {$first: '$orders'},\n          },\n        }]);\n  }\n\n  async getOne(userId: string): Promise<User | null> {\n    console.log('model', this.userModel);\n    const users = await this.userModel.aggregate([{\n      $match: {\n          id: userId,\n        }},\n      {$group: {\n          _id: '$_id',\n          id: {$first: '$id'},\n          username: {$first: '$username'},\n          wallet: {$first: '$wallet'},\n          products: {$first: '$products'},\n          reviews: {$first: '$reviews'},\n          following: {$first: '$following'},\n          orders: {$first: '$orders'},\n        }\n      }]);\n    console.log('users', users);\n    return users[0];\n  }\n\n}\n","export * from './lib/id.type';\nexport * from './lib/category';\nexport * from './lib/product';\nexport * from './lib/review.interface';\nexport * from './lib/user.interface';\nexport * from './lib/api-response.interface';\nexport * from './lib/auth.interface';\nexport * from './lib/order.interface';\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"bcrypt\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"neo4j-driver\");","module.exports = require(\"rxjs/operators\");","module.exports = require(\"tslib\");","module.exports = require(\"uuid\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { ApiResponseInterceptor } from './app/api-response.interceptor';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.enableCors();\n  // const globalPrefix = 'data-api';\n  // app.setGlobalPrefix(globalPrefix);\n\n  app.useGlobalInterceptors(new ApiResponseInterceptor());\n\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  \n  Logger.log(\n    `🚀 Data API is running on: ${await app.getUrl()}`\n  );\n}\n\nbootstrap();\n"],"names":["ApiResponseInterceptor","intercept","context","next","handle","pipe","map","results","info","version","type","Array","count","length","undefined","Injectable","AppModule","configure","consumer","apply","TokenMiddleware","forRoutes","Module","imports","MongooseModule","forRoot","process","env","MONGO_HOST","MONGO_DATABASE","Neo4jModule","scheme","host","NEO4J_HOST","username","NEO4J_USR","password","NEO4J_PWD","database","NEO4J_DATABASE","AuthModule","DataModule","RcmdModule","RouterModule","register","path","module","controllers","providers","AuthController","constructor","authService","credentials","console","log","this","registerUser","id","createUser","e","HttpException","HttpStatus","BAD_REQUEST","login","generateToken","UNAUTHORIZED","Post","Body","UserRegistration","Promise","Controller","AuthService","forFeature","name","Identity","schema","IdentitySchema","User","UserSchema","exports","identityModel","userModel","neo4jService","user","save","singleWrite","verifyToken","token","resolve","reject","verify","JWT_SECRET","err","payload","generatedHash","hash","parseInt","SALT_ROUNDS","identity","findOne","compare","Error","sign","InjectModel","Model","Neo4jService","Prop","required","unique","Schema","SchemaFactory","createForClass","InjectToken","createParamDecorator","_data","ctx","switchToHttp","getResponse","locals","use","req","res","authHeader","header","Product","ProductSchema","Review","ReviewSchema","Order","OrderSchema","Follow","FollowSchema","UserController","ProductController","ReviewController","OrderController","FollowController","UserService","ProductService","ReviewService","OrderService","FollowService","followService","CheckIfFollowed","GetAllFollowers","followingUser","Unfollow","getFollowersInterests","Get","Token","Delete","Param","default","index","followModel","tokenId","findFollowingUser","aggregate","$match","$group","_id","$first","all","updateOne","$push","following","findFollowingId","followUser","followingId","userId","followingUsername","getFollowingUser","$pull","unfollowUser","getResultOfInterests","singleRead","records","record","get","properties","NEO4J_CONFIG","NEO4J_DRIVER","static","config","global","provide","useValue","inject","useFactory","createDriver","driver","getSession","mode","session","defaultAccessMode","executeSingle","query","params","result","run","close","executeTransaction","transactionWork","READ","executeRead","executeWrite","getConfig","WRITE","readTransaction","writeTransaction","text","r","toObject","onApplicationShutdown","Inject","Neo4jConfig","Driver","auth","basic","getServerInfo","orderService","getAll","create","order","delete","orderId","Date","productModel","orderModel","authorId","productId","quantity","total","deliveryDate","productImage","productName","$lookup","from","localField","foreignField","as","getOne","product","author","newOrder","price","productPrice","setDate","getDate","image","orders","push","updateUser","findOneAndUpdate","$set","wallet","updateProduct","findOneAndDelete","productService","update","Patch","description","reviews","category","$addFields","rating","$avg","deleteOne","updateMany","products","multi","newProduct","addProductToUser","new","AddProductWithUser","productDescription","productQuantity","productCategory","updatedProduct","arrayFilters","reviewService","review","now","validate","reviewModel","$elemMatch","NotFoundException","newReview","createdReview","createdReview2","updatedReview","updatedReview2","updatedReview3","formatReviewDate","date","toLocaleString","month","year","day","userService","getSelf","users","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","app","NestFactory","enableCors","useGlobalInterceptors","port","PORT","listen","Logger","getUrl","bootstrap"],"sourceRoot":""}